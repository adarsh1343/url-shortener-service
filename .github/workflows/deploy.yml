# This is the name of the workflow as it will appear in the "Actions" tab of your GitHub repository.
name: Deploy to EC2

# This section defines the trigger for the workflow.
# We want it to run on every push to the 'main' branch.
on:
  push:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This job is responsible for building the Docker image and pushing it to Docker Hub.
  build:
    name: Build and Push Docker Image
    # The type of runner that the job will run on. 'ubuntu-latest' is a standard choice.
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code so the workflow can access it.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub using the secrets we stored in GitHub.
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Build the Docker image and push it to our Docker Hub repository.
      # We tag the image with the unique Git commit SHA for versioning.
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener-service:${{ github.sha }}

  # This job is responsible for deploying the new image to our AWS EC2 server.
  deploy:
    name: Deploy to EC2
    # This job needs the 'build' job to complete successfully before it can run.
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Step 1: Use a pre-made action from the GitHub Marketplace to run SSH commands.
      # This is much simpler than the manual setup we did in GitLab.
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SERVER_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # The script that will be executed on the remote server.
          script: |
            # Pull the new image from Docker Hub
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener-service:${{ github.sha }}

            # Stop and remove the old containers if they exist
            docker stop url-shortener-app || true
            docker rm url-shortener-app || true
            docker stop url-shortener-db || true
            docker rm url-shortener-db || true

            # Start the database container
            docker run -d --name url-shortener-db \
              -e POSTGRES_USER=myuser \
              -e POSTGRES_PASSWORD=mypassword \
              -e POSTGRES_DB=urldb \
              --restart always \
              postgres:14-alpine
            
            # Wait for the database to initialize
            echo "Waiting for database to be ready..."
            sleep 15

            # Start the application container, linking it to the database
            docker run -d --name url-shortener-app \
              -p 80:3000 \
              -e POSTGRES_USER=myuser \
              -e POSTGRES_PASSWORD=mypassword \
              -e POSTGRES_DB=urldb \
              -e POSTGRES_HOST=url-shortener-db \
              --link url-shortener-db:db \
              --restart always \
              ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener-service:${{ github.sha }}
